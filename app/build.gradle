/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */


import at.bxm.gradleplugins.svntools.tasks.*

plugins {
    id("application")
    id("java")
    id("org.springframework.boot") version "2.4.2"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id("at.bxm.svntools") version "2.2.1"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.google.guava:guava:29.0-jre")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

application {
    // Define the main class for the application.
    mainClass.set("com.example.App")
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

svntools {
    username = svnUsername
    password = svnPassword
}

def deployDir = "$buildDir/../deploy"

def listFiles(File dir, List<String> outFiles) {
    dir.eachFile {
        if(it.name == ".svn") {
            return
        }
        outFiles.add(it.path)
        if(it.isDirectory()) {
            listFiles(it, outFiles)
        }
    }
}

def orderingTasks(List<Task> tasks) {
    for (int i = tasks.size() - 1; i > 0; i--) {
        tasks[i].mustRunAfter(tasks[i - 1])
    }
}

task deployCheckout(type: SvnCheckout) {
    svnUrl = "https://RD-20201113CFEP/svn/test/"
    workspaceDir = "${deployDir}"
    onlyIf { !file("${deployDir}").exists() }
    doLast {
        println("checkout: " + file("$buildDir/../deploy").absolutePath);
    }
}

task deployRevert(type: SvnRevert) {
    revert = "${deployDir}"
    recursive = true
}

task deployUpdate(type: SvnUpdate) {
    workspaceDir = "${deployDir}"
    onlyIf { file("${deployDir}").exists() }
}

List<Task> checkoutOrUpdateTasks = new ArrayList<Task>()
checkoutOrUpdateTasks.add(tasks.deployCheckout)
checkoutOrUpdateTasks.add(tasks.deployRevert)
checkoutOrUpdateTasks.add(tasks.deployUpdate)
orderingTasks(checkoutOrUpdateTasks)

task deployCheckoutOrUpdate() {
    dependsOn(checkoutOrUpdateTasks)
}

def oldFiles = new ArrayList<String>();
def newFiles = new ArrayList<String>();

task deployCleanTarget(type: Delete) {
    delete("${deployDir}/lib")
}

task deployCopy(type: Copy) {
    doFirst {
        logger.info("before clean: ${deployDir}")
        listFiles(file("${deployDir}"), oldFiles)
        try {
            tasks.deployCleanTarget.clean()
        } catch(Exception e) {
            // 忽略delete错误
            logger.info("", e)
        }
    }
    from(zipTree("${buildDir}/distributions/${project.name}.zip"))
    include("**/*.jar")
    into("${deployDir}")
    eachFile {
        it.path = it.path.replaceFirst("^${project.name}", '')
    }
    includeEmptyDirs(false)
    doLast {
        logger.info("after copy: ${deployDir}")
        listFiles(file("${deployDir}"), newFiles)
    }
}

task deploySvnDelete(type: SvnDelete) {
    doFirst {
        Iterator<String> iter = oldFiles.iterator()
        while(iter.hasNext()) {
            if(newFiles.contains(iter.next())) {
                iter.remove()
            }
        }
        logger.info("delete files:")
        oldFiles.forEach({
            logger.info(it)
        })
    }
    delete(oldFiles)
}


task deploySvnCommit(type: SvnCommit) {
    doFirst {
        newFiles.addAll(oldFiles)
    }
    source = newFiles
    recursive = true
    commitMessage = "auto commit"
}

List<Task> commitTasks = new ArrayList<Task>()
commitTasks.add(tasks.deployCopy)
commitTasks.add(tasks.deploySvnDelete)
commitTasks.add(tasks.deploySvnCommit)
orderingTasks(commitTasks)

task deployCommit() {
    dependsOn(commitTasks)
}

//------------------任务接口-------------------

// 更新发布目录
task A_update() {
    dependsOn(deployCheckoutOrUpdate)
}

List<Task> myTasks = new ArrayList<Task>()
myTasks.add(tasks.A_update)
myTasks.add(tasks.assemble)
myTasks.add(tasks.deployCommit)
orderingTasks(myTasks)

// 发布
task A_deploy() {
    dependsOn(myTasks)
}

//tasks.register<Copy>("unpackFiles") {
//    from(zipTree("$buildDir/app.jar"))
//    into("$buildDir/test")
//}
